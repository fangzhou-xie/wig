// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// wig_cpp
Rcpp::List wig_cpp(arma::mat& docs, arma::mat& C, const int num_topics, const int batch_size, const int epochs, const int loss, const int optimizer, const double lr, const double beta1, const double beta2, const double eps, const double reg, const int maxIter, const double zeroTol, const bool verbose);
RcppExport SEXP _wig_wig_cpp(SEXP docsSEXP, SEXP CSEXP, SEXP num_topicsSEXP, SEXP batch_sizeSEXP, SEXP epochsSEXP, SEXP lossSEXP, SEXP optimizerSEXP, SEXP lrSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP epsSEXP, SEXP regSEXP, SEXP maxIterSEXP, SEXP zeroTolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type docs(docsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const int >::type num_topics(num_topicsSEXP);
    Rcpp::traits::input_parameter< const int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< const int >::type epochs(epochsSEXP);
    Rcpp::traits::input_parameter< const int >::type loss(lossSEXP);
    Rcpp::traits::input_parameter< const int >::type optimizer(optimizerSEXP);
    Rcpp::traits::input_parameter< const double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< const double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< const double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const double >::type reg(regSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const double >::type zeroTol(zeroTolSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(wig_cpp(docs, C, num_topics, batch_size, epochs, loss, optimizer, lr, beta1, beta2, eps, reg, maxIter, zeroTol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// euclidean
arma::mat euclidean(const arma::mat& a);
RcppExport SEXP _wig_euclidean(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(euclidean(a));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_wig_wig_cpp", (DL_FUNC) &_wig_wig_cpp, 15},
    {"_wig_euclidean", (DL_FUNC) &_wig_euclidean, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_wig(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
